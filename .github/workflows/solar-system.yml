name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'
env:
  MONGO_URI: ${{ vars.MONGO_URI }}
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}     
jobs:
    unit-testing:
        name: Unit Testing
        runs-on: ubuntu-latest
        container: #added
          image: 'node:20' #added
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        #- name: Setup NodeJS Version
        #  uses: actions/setup-node@v3
        #  with:
        #    node-version: 20
        - name: Cache NPM dependencies
          uses: actions/cache@v3
          with:
            path: ~/.npm
            key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
    
        - name: Install Dependencies
          run: npm install
    
        - name: Unit Testing
          run: npm test
        - name: Archive Test Result
          if: always()
          uses: actions/upload-artifact@v3
          with:
            name: Mocha-Test-Result
            path: test-results.xml

    code-coverage:
        name: Code Coverage
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4
        
        - name: Setup NodeJS Version
          uses: actions/setup-node@v3
          with:
            node-version: 20
        
        - name: Install Dependencies
          run: npm install
        
        - name: Check Code Coverage 	  
          continue-on-error: true
          run: npm run coverage
        - name: Archive Test Result
          uses: actions/upload-artifact@v3
          with:
            name: Code-Coverage-Result
            path: coverage
            retention-days: 5
    docker:
        permissions:
          packages: write
        name: docker
        needs: [unit-testing, code-coverage ]
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4
        - name: DockerHub Login
          uses: docker/login-action@v2.2.0
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner}}
            password: ${{ secrets.GITHUB_TOKEN }}
        - name: Container Registry Push
          uses: docker/build-push-action@v4
          with:
            context: .
            push: true
            tags: ghcr.io/${{ github.repository_owner }}/solar-system:${{github.sha}}
    
    dev-deploy:
        needs: docker
        environment:
          name: development
        runs-on: ubuntu-latest
        outputs:
          APP_INGRESS_URL: ${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }}          
        steps:
          - name: Checkout Repo
            uses: actions/checkout@v4
          - name: Install kubectl CLI
            uses: azure/setup-kubectl@v3 
            with:
              version: 'v1.26.0'
          - name: Set kubeconfig file
            uses: azure/k8s-set-context@v3
            with:
              method: kubeconfig
              kubeconfig: '${{ secrets.KUBECONFIG }}'
          - run: kubectl version --short -o yaml
            continue-on-error: true
          - name: Fetch Nginx Ingress Controller IP 
            run: |
              echo "INGRESS_IP=$(kubectl -n ingress-nginx get services ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}')" >> $GITHUB_ENV
          - name: Replace Token in manifest files
            uses: cschleiden/replace-tokens@v1
            with:
              tokenPrefix: '_{_'
              tokenSuffix: '_}_'
              files: '["kubernetes/development/*.yaml"]'
            env:
              NAMESPACE: ${{ vars.NAMESPACE }}
              REPLICAS: ${{ vars.REPLICAS }}
              IMAGE: ghcr.io/${{ github.repository_owner }}/solar-system:${{github.sha}}
              INGRESS_IP: ${{ env.INGRESS_IP }}
          - name: Check Files
            run: cat kubernetes/development/*.yaml
          - name: Create Mongo Secret 
            run : |
               kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
               --from-literal=MONGO_URL=${{ env.MONGO_URI }} \
               --from-literal=MONGO_USERNAME=${{ vars.MONGO_USERNAME }} \
               --from-literal=MONGO_PASSWORD=${{ env.MONGO_PASSWORD }} \
               -- save-config \
               -- dry-run = client \
               - o yaml | kubectl apply -f -
          - name: Deploy to Dev Env 
            run : | 
                kubectl apply -f kubernetes/development
          - name: Set APP Ingress Host URL 
            id: set-ingress-host-address
            run: |
               echo "APP_INGRESS_HOST= $(kubectl -n ${{ vars.NAMESPACE}} get ingress -o jsonpath='{.items[0].spec.tls[0].hosts[0]}')" >> "$GITHUB_ENV"
    integration-testing:
        needs: dev-deploy
        uses: ./.github/workflows/reusable-workflow.yml
        with:
          ingress-url: ${{ needs.dev-deploy.outputs.APP_INGRESS_URL }}

